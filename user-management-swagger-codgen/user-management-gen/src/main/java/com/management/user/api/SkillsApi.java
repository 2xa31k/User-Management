/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.management.user.api;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;

import com.management.user.dto.SkillDTO;
import com.management.user.dto.UserDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import springfox.documentation.annotations.ApiIgnore;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-10T10:54:15.182758900+01:00[Africa/Casablanca]")
@Validated
public interface SkillsApi {

    /**
     * GET /skills/{id} : Get all user skills
     * Returns a list of user&#39;s skills
     *
     * @param id User ID (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "skillsIdGet",
        summary = "Get all user skills",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  SkillDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/skills/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<SkillDTO>>> skillsIdGet(
        @Parameter(name = "id", description = "User ID", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        Mono<Void> result = Mono.empty();
        return result.then(Mono.empty());

    }


    /**
     * POST /skills/{id} : Create a new user
     * Creates a new user with the given data
     *
     * @param id User ID (required)
     * @param skillDTO Skill data (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "skillsIdPost",
        summary = "Create a new user",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/skills/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<SkillDTO>> skillsIdPost(
        @Parameter(name = "id", description = "User ID", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "SkillDTO", description = "Skill data", required = true, schema = @Schema(description = "")) @Valid @RequestBody SkillDTO skillDTO
    ) {
        Mono<Void> result = Mono.empty();
        return result.then(Mono.empty());

    }

}
