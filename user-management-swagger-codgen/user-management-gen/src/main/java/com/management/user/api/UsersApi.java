/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.management.user.api;

import javax.annotation.Generated;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.server.ServerWebExchange;

import com.management.user.dto.PageResponseDTO;
import com.management.user.dto.UserDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import springfox.documentation.annotations.ApiIgnore;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-09T19:56:45.811009400+01:00[Africa/Casablanca]")
@Validated
public interface UsersApi {

    /**
     * GET /users : Get all users
     * Returns a list of all users
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "usersGet",
        summary = "Get all users",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<UserDTO>>> usersGet(
       // @Parameter(hidden = true) @ApiIgnore final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        
        return result.then(Mono.empty());

    }


    /**
     * DELETE /users/{id} : Delete user by ID
     * Deletes the user with the given ID
     *
     * @param id User ID (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "usersIdDelete",
        summary = "Delete user by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/users/{id}"
    )
    default Mono<ResponseEntity<Void>> usersIdDelete(
        @Parameter(name = "id", description = "User ID", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        Mono<Void> result = Mono.empty();

        return result.then(Mono.empty());

    }


    /**
     * GET /users/{id} : Get user by ID
     * Returns the user with the given ID
     *
     * @param id User ID (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "usersIdGet",
        summary = "Get user by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<UserDTO>> usersIdGet(
        @Parameter(name = "id", description = "User ID", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id
    ) {
        Mono<Void> result = Mono.empty();
        return result.then(Mono.empty());

    }


    /**
     * PUT /users/{id} : Update user by ID
     * Updates the user with the given ID
     *
     * @param id User ID (required)
     * @param userDTO User data (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "usersIdPut",
        summary = "Update user by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserDTO>> usersIdPut(
        @Parameter(name = "id", description = "User ID", required = true, schema = @Schema(description = "")) @PathVariable("id") Long id,
        @Parameter(name = "UserDTO", description = "User data", required = true, schema = @Schema(description = "")) @Valid @RequestBody UserDTO userDTO
    ) {
        Mono<Void> result = Mono.empty();
        
        return result.then(Mono.empty());

    }


    /**
     * POST /users : Create a new user
     * Creates a new user with the given data
     *
     * @param userDTO User data (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "usersPost",
        summary = "Create a new user",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  UserDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<UserDTO>> usersPost(
        @Parameter(name = "UserDTO", description = "User data", required = true, schema = @Schema(description = "")) @Valid @RequestBody UserDTO userDTO
    ) {
        Mono<Void> result = Mono.empty();
        return result.then(Mono.empty());

    }
    /**
     * GET /users/search : Get all users
     * Returns a list of all users
     *
     * @param minSalaire minimum salaire (required)
     * @param maxSalaire maximum salaire (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "usersSearchGet",
        summary = "Get all users",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  PageResponseDTO.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/search",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<PageResponseDTO>> usersSearchGet(
            @Parameter(name = "minSalaire", description = "minimum salaire", schema = @Schema(description = "", defaultValue = "1500")) @Valid @RequestParam(value = "minSalaire", required = false, defaultValue = "1500") Integer minSalaire,
            @Parameter(name = "maxSalaire", description = "maximum salaire", schema = @Schema(description = "", defaultValue = "50000")) @Valid @RequestParam(value = "maxSalaire", required = false, defaultValue = "50000") Integer maxSalaire,
            @Parameter(name = "page", description = "page", schema = @Schema(description = "", defaultValue = "0")) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
            @Parameter(name = "size", description = "size", schema = @Schema(description = "", defaultValue = "5")) @Valid @RequestParam(value = "size", required = false, defaultValue = "5") Integer size
    ) {
        Mono<Void> result = Mono.empty();

        return result.then(Mono.empty());

    }
}
