openapi: 3.0.0
info:
  title: Sample API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all users
      description: Returns a list of all users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a new user
      description: Creates a new user with the given data
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/search:
    get:
      summary: Get all users
      description: Returns a list of all users
      parameters:
        - name: minSalaire
          in: query
          description: minimum salaire
          schema:
            type: integer
            default: 1500
        - name: maxSalaire
          in: query
          description: maximum salaire
          schema:
            type: integer
            default: 50000
        - name: page
          in: query
          description: page
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: size
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PageResponse"
  "/users/{id}":
    get:
      summary: Get user by ID
      description: Returns the user with the given ID
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: Update user by ID
      description: Updates the user with the given ID
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      summary: Delete user by ID
      description: Deletes the user with the given ID
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          
  /skills/{id}:
    get:
      summary: Get all user skills
      description: Returns a list of user's skills
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
    post:
      summary: Create a new user
      description: Creates a new user with the given data
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/Skill"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skill"
servers:
  - url: /api
components:
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      description: User data
      required: true
    Skill:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Skill"
      description: Skill data
      required: true
    PageResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PageResponse"
      description: search response
      required: true
  schemas:
    User:
      type: object
      required:
        - email
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        phonenumber:
          type: string
        email:
          type: string
          format: email
        salaire:
          type: integer
          format: int64
          minimum: 2000
        skills:
           type: array
           items:
              $ref: '#/components/schemas/Skill'
     
    Skill:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    
    PageResponse:
      type: object
      properties:
        users:
          type: Object
        totalSalaire:
          type: integer
          format: int64
        averageSalaire:
          type: integer
          format: int64